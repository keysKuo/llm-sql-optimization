**SQL Query:**
```sql
SELECT 
    p.ten_phim,
    COUNT(lc.ma_lich_chieu) AS so_lan_chieu
FROM 
    phim p
JOIN 
    lich_chieu lc ON p.ma_phim = lc.ma_phim
GROUP BY 
    p.ten_phim
ORDER BY 
    so_lan_chieu DESC
LIMIT 10;
```

**Explanation:**
This SQL query retrieves the top 10 movies with the highest number of screenings. Here's a breakdown of how it works:

1. **`SELECT p.ten_phim, COUNT(lc.ma_lich_chieu) AS so_lan_chieu`**: This part specifies the columns to be retrieved. 
    - `p.ten_phim`: Selects the movie title from the `phim` table (aliased as `p`).
    - `COUNT(lc.ma_lich_chieu)`: Counts the number of movie showtimes (represented by `ma_lich_chieu` in the `lich_chieu` table, aliased as `lc`) for each movie. The result is aliased as `so_lan_chieu` (number of screenings).

2. **`FROM phim p JOIN lich_chieu lc ON p.ma_phim = lc.ma_phim`**: This section joins the `phim` and `lich_chieu` tables based on the common column `ma_phim` (movie ID). This combines data from both tables to perform the count.

3. **`GROUP BY p.ten_phim`**:  The results are grouped by movie title (`p.ten_phim`). This ensures that the `COUNT()` function calculates the number of screenings per movie.

4. **`ORDER BY so_lan_chieu DESC`**:  The grouped results are sorted in descending order based on the `so_lan_chieu` column (number of screenings), so the movies with the most screenings appear first.

5. **`LIMIT 10`**:  Finally, only the top 10 movies (based on the sorting) are returned.

**Suggestion:**
- **Index:** Create an index on the `ma_phim` column in both the `phim` and `lich_chieu` tables. This will significantly speed up the join operation, as the database can efficiently find matching movie IDs.  

 **Problems:**
-  **Potential for Performance Issues:** 
    - Without proper indexing, especially on the `ma_phim` column, large tables could lead to slow query execution times due to the full table scan during the join.